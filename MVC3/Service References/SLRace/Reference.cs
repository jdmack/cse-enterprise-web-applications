//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC3.SLRace {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Race", Namespace="http://schemas.datacontract.org/2004/07/DomainModel")]
    [System.SerializableAttribute()]
    public partial class Race : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private char codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public char code {
            get {
                return this.codeField;
            }
            set {
                if ((this.codeField.Equals(value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SLRace.ISLRace")]
    public interface ISLRace {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISLRace/GetRace", ReplyAction="http://tempuri.org/ISLRace/GetRaceResponse")]
        MVC3.SLRace.Race GetRace(int id, ref string[] errors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISLRace/InsertRace", ReplyAction="http://tempuri.org/ISLRace/InsertRaceResponse")]
        void InsertRace(MVC3.SLRace.Race race, ref string[] errors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISLRace/UpdateRace", ReplyAction="http://tempuri.org/ISLRace/UpdateRaceResponse")]
        void UpdateRace(MVC3.SLRace.Race race, ref string[] errors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISLRace/DeleteRace", ReplyAction="http://tempuri.org/ISLRace/DeleteRaceResponse")]
        void DeleteRace(int id, ref string[] errors);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISLRace/GetRaceList", ReplyAction="http://tempuri.org/ISLRace/GetRaceListResponse")]
        MVC3.SLRace.Race[] GetRaceList(ref string[] errors);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISLRaceChannel : MVC3.SLRace.ISLRace, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SLRaceClient : System.ServiceModel.ClientBase<MVC3.SLRace.ISLRace>, MVC3.SLRace.ISLRace {
        
        public SLRaceClient() {
        }
        
        public SLRaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SLRaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SLRaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SLRaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MVC3.SLRace.Race GetRace(int id, ref string[] errors) {
            return base.Channel.GetRace(id, ref errors);
        }
        
        public void InsertRace(MVC3.SLRace.Race race, ref string[] errors) {
            base.Channel.InsertRace(race, ref errors);
        }
        
        public void UpdateRace(MVC3.SLRace.Race race, ref string[] errors) {
            base.Channel.UpdateRace(race, ref errors);
        }
        
        public void DeleteRace(int id, ref string[] errors) {
            base.Channel.DeleteRace(id, ref errors);
        }
        
        public MVC3.SLRace.Race[] GetRaceList(ref string[] errors) {
            return base.Channel.GetRaceList(ref errors);
        }
    }
}
